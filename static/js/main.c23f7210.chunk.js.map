{"version":3,"sources":["components/Coin/Coin.jsx","components/CoinList/CoinList.jsx","components/AccountBalance/AccountBalance.jsx","components/ExchangeHeader/logo.svg","components/ExchangeHeader/ExchangeHeader.jsx","App.js","reportWebVitals.js","index.js"],"names":["Td","styled","td","Coin","props","name","ticker","price","showBalance","balance","action","method","onClick","event","preventDefault","handleRefresh","tickerId","Table","table","CoinList","coinData","map","key","Section","section","AccountBalance","buttonText","content","amount","handleBalanceVisibilityChange","Img","img","H1","h1","Header","header","ExchangeHeader","src","logo","alt","Div","div","formatPrice","parseFloat","Number","toFixed","App","useState","setShowBalance","setCoinData","componentDidMount","a","axios","get","response","coinIds","data","slice","coin","id","promises","Promise","all","coinPriceData","symbol","quotes","USD","useEffect","length","valueChangeId","tickerUrl","newPrice","newCoinData","values","newValues","className","oldValue","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c23f7210.chunk.js","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Td = styled.td `\r\nmargin: 25rem;\r\nborder: 1px solid white;`;   \r\n\r\n\r\nexport default function Coin(props)  {\r\n    \r\n   const handleClick = (event) =>{\r\n        //Prevent the default action of submitting the form\r\n        event.preventDefault();\r\n\r\n\r\n        props.handleRefresh(props.tickerId);\r\n    }\r\n     return ( \r\n            <tr>\r\n                <Td>{props.name}</Td>\r\n                <Td>{props.ticker}</Td>\r\n                <Td>${props.price}</Td>\r\n                {props.showBalance ? <Td>{props.balance}</Td> : null}\r\n                <Td>\r\n                    <form action=\"#\" method=\"POST\">\r\n                    <button onClick={handleClick}>Refresh</button>\r\n                    </form>\r\n                </Td>\r\n            </tr>\r\n        )\r\n    \r\n}\r\n\r\nCoin.propTypes= {\r\nname: PropTypes.string.isRequired,\r\nticker: PropTypes.string.isRequired,\r\nprice: PropTypes.number.isRequired, \r\n}","import React from 'react'\r\nimport Coin from '../Coin/Coin';\r\nimport styled from 'styled-components';\r\n\r\nconst Table = styled.table`\r\ncolor: white;\r\n    margin: 25px auto 25px auto ;\r\n    display: inlineblock;\r\n    font-size: 1.4rem;\r\n`;\r\n\r\nexport default function CoinList(props) {\r\n    return (\r\n      <Table>\r\n        <thead>\r\n          <tr>\r\n            <th>Name</th>\r\n            <th>Ticker</th>\r\n            <th>Price</th>\r\n            {props.showBalance ? <th>Balance</th> : null}\r\n            <th>Actions</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody > \r\n          {\r\n            props.coinData.map(({key, name, ticker, price, balance}) =>\r\n            <Coin key= {key} \r\n                  handleRefresh={props.handleRefresh} \r\n                  name={name} \r\n                  ticker={ticker} \r\n                  showBalance={props.showBalance}\r\n                  balance={balance}\r\n                  price={price} \r\n                  tickerId={key}/>\r\n          )\r\n          }\r\n        </tbody>\r\n      </Table>\r\n  )\r\n    \r\n}\r\n\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\n\r\nconst Section = styled.section `\r\ncolor: white;\r\nfont-size: 2rem;\r\ntext-align: left;\r\npadding 1.5rem 0 1.5rem 5rem;\r\n`;\r\n\r\nexport default function AccountBalance(props) {\r\n    \r\n    const buttonText = props.showBalance ? \"Hide Balance\" : \"Show Balance\";\r\n    let content = null;\r\n    if(props.showBalance) {\r\n        content = <>Big Money Balance:${props.amount}</>;\r\n    }\r\n    return (\r\n        <Section>\r\n                {content} \r\n                <button onClick={props.handleBalanceVisibilityChange}>{buttonText}</button> \r\n        </Section>\r\n    )\r\n    \r\n}\r\n\r\n\r\n\r\n\r\n\r\nAccountBalance.propTypes = {\r\n     amount: PropTypes.number.isRequired\r\n    }","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport styled from 'styled-components';\r\n\r\nconst Img = styled.img`\r\nheight: 6rem;\r\n    pointer-events: none;\r\n`;\r\n\r\nconst H1 = styled.h1`\r\ncolor:rgb(244, 248, 240);\r\n`;\r\n\r\nconst Header = styled.header`\r\nbackground-color: rgb(2, 1, 53);\r\n    min-height: 20vh;\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n    justify-content: flex-start;\r\n    font-size: calc(10px + 2vmin);\r\n    color: white;\r\n`;\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n\r\nexport default function ExchangeHeader(props) {\r\n    \r\n    return (\r\n        <Header>\r\n        <Img src={logo} alt=\"React Logo\" />\r\n        <H1>\r\n            The Greatest Coin Exchange of All Time\r\n        </H1>\r\n        </Header>\r\n    )\r\n    \r\n}\r\n\r\n","import React, {useState,useEffect} from 'react';\nimport styled from 'styled-components';\nimport CoinList from './components/CoinList/CoinList';\nimport AccountBalance from './components/AccountBalance/AccountBalance';\nimport Exchangeheader from './components/ExchangeHeader/ExchangeHeader';\nimport axios from 'axios';\n\n\nconst Div = styled.div`\n    text-align: center;\n    background-color: rgb(4, 6, 85);\n`;\n\nconst COIN_COUNT =10;\nconst formatPrice = price => parseFloat(Number(price).toFixed(4));\n\nfunction App (props) {\n\n  const [balance, setBalance] = useState(10000);\n  const [showBalance, setShowBalance] = useState(true);\n  const [coinData, setCoinData] = useState([]);\n\n  const componentDidMount = async () => {\n  const response = await axios.get('https://api.coinpaprika.com/v1/coins');\n  const coinIds = response.data.slice(0, COIN_COUNT).map(coin => coin.id);\n  const tickerUrl = 'https://api.coinpaprika.com/v1/tickers/';\n  const promises = coinIds.map(id => axios.get(tickerUrl + id));\n  const coinData = await Promise.all(promises);\n  const coinPriceData = coinData.map(function(response) {\n    const coin = response.data;\n      return {\n        key: coin.id,\n        name: coin.name,\n        ticker: coin.symbol,\n        balance: 0,\n        price: formatPrice(coin.quotes.USD.price),\n      };    \n  });\n    //Retrieve the prices \n    setCoinData(coinPriceData);\n }\n\n useEffect(function() {\n   if(coinData.length === 0) {\n     componentDidMount();\n   }\n  });\n  \n  const handleBalanceVisibilityChange = () =>{\n   setShowBalance(oldValue => !oldValue);\n  }\n\n  const handleRefresh = async (valueChangeId) => {\n    const tickerUrl = `https://api.coinpaprika.com/v1/tickers/${valueChangeId}`;\n    const response = await axios.get(tickerUrl);\n    const newPrice = formatPrice(response.data.quotes.USD.price);\n    const newCoinData = coinData.map( function(values) {\n      let newValues = {...values};\n      if( valueChangeId === values.key ){\n        newValues.price = newPrice;\n      }\n      return newValues;\n      \n    });\n\n    setCoinData(newCoinData);\n  }\n    \n    return (\n      <Div className=\"App\">\n         <Exchangeheader />\n         <AccountBalance \n            amount= {balance} \n            showBalance={showBalance} \n            handleBalanceVisibilityChange={handleBalanceVisibilityChange}/>\n         <CoinList \n         coinData={coinData} \n         showBalance={showBalance}\n         handleRefresh={handleRefresh}/>\n         \n        \n      </Div>\n    );\n \n  \n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
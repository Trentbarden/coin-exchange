{"version":3,"sources":["components/Coin/Coin.jsx","components/CoinList/CoinList.jsx","components/AccountBalance/AccountBalance.jsx","components/ExchangeHeader/logo.svg","components/ExchangeHeader/ExchangeHeader.jsx","App.js","reportWebVitals.js","index.js"],"names":["Td","styled","td","TdControls","TdName","Button","button","Coin","props","name","ticker","price","showBalance","balance","action","method","className","onClick","event","preventDefault","handleRefresh","tickerId","handleTransaction","Table","table","CoinList","coinData","map","key","Section","section","BalanceToggleButton","Balance","div","formater","Intl","NumberFormat","style","currency","AccountBalance","buttonText","content","format","amount","buttonClass","handleBalanceVisibilityChange","handleBrrrr","Img","img","H1","h1","Header","header","ExchangeHeader","src","logo","alt","Div","formatPrice","parseFloat","Number","toFixed","App","useState","setBalance","setShowBalance","setCoinData","componentDidMount","a","axios","get","response","coinIds","data","slice","coin","id","promises","Promise","all","coinPriceData","symbol","quotes","USD","useEffect","length","valueChangeId","tickerUrl","newPrice","newCoinData","values","newValues","oldBalance","oldValue","isBuy","balanceChange","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f8539c88.chunk.js","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Td = styled.td `\r\nmargin: 25rem;\r\nborder: 1px solid white;\r\nwidth: 14vw;\r\n`;   \r\n\r\nconst TdControls = styled(Td)`\r\nwidth: 34vw;\r\n`;\r\n\r\nconst TdName = styled(Td)`\r\nwidth 20vw;\r\n`;\r\n\r\nconst Button = styled.button `\r\nfont-size: 11px;\r\nwidt: 64px;\r\nmargin: 3px 5px 0;\r\n`;\r\n\r\nexport default function Coin(props)  {\r\n    \r\n   const handleRefresh = (event) =>{\r\n        //Prevent the default action of submitting the form\r\n        event.preventDefault();\r\n        props.handleRefresh(props.tickerId);\r\n    }\r\n    const handleBuy = (event) =>{\r\n        //Prevent the default action of submitting the form\r\n        event.preventDefault();\r\n        props.handleTransaction(true, props.tickerId);\r\n    }\r\n    const handleSell = (event) =>{\r\n        //Prevent the default action of submitting the form\r\n        event.preventDefault();\r\n        props.handleTransaction(false, props.tickerId);\r\n    }\r\n     return ( \r\n            <tr>\r\n                <TdName>{props.name}</TdName>\r\n                <Td>{props.ticker}</Td>\r\n                <Td>${props.price}</Td>\r\n                <Td>{props.showBalance ? props.balance : \"-\"}</Td>\r\n                <TdControls>\r\n                    <form action=\"#\" method=\"POST\">\r\n                    <Button className = \"btn btn-info\" onClick={handleRefresh}>\r\n                        Refresh\r\n                    </Button>\r\n                    <Button className = \"btn btn-warning\" onClick={handleBuy}>\r\n                        Buy\r\n                    </Button>\r\n                    <Button className = \"btn btn-danger\" onClick={handleSell}>\r\n                        Sell\r\n                    </Button>\r\n                    </form>\r\n                </TdControls>\r\n            </tr>\r\n        )\r\n    \r\n}\r\n\r\nCoin.propTypes= {\r\nname: PropTypes.string.isRequired,\r\nticker: PropTypes.string.isRequired,\r\nprice: PropTypes.number.isRequired, \r\n}","import React from 'react'\r\nimport Coin from '../Coin/Coin';\r\nimport styled from 'styled-components';\r\n\r\nconst Table = styled.table`\r\n    color: white;\r\n    font-size: 1.4rem;\r\n`;\r\n\r\nexport default function CoinList(props) {\r\n    return (\r\n      <Table className = \"table table-primary table-bordered\">\r\n        <thead>\r\n          <tr>\r\n            <th>Name</th>\r\n            <th>Ticker</th>\r\n            <th>Price</th>\r\n            <th>Balance</th> \r\n            <th>Actions</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody > \r\n          {\r\n            props.coinData.map(({key, name, ticker, price, balance}) =>\r\n            <Coin key= {key} \r\n                  handleRefresh={props.handleRefresh}\r\n                  handleTransaction={props.handleTransaction} \r\n                  name={name} \r\n                  ticker={ticker} \r\n                  showBalance={props.showBalance}\r\n                  balance={balance}\r\n                  price={price} \r\n                  tickerId={key}/>\r\n          )\r\n          }\r\n        </tbody>\r\n      </Table>\r\n  )\r\n    \r\n}\r\n\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\n\r\nconst Section = styled.section `\r\ncolor: white;\r\nfont-size: 2rem;\r\ntext-align: center;\r\nmargin-bottom: 2rem;\r\ndisplay: inline-block;\r\n`;\r\n\r\nconst Button = styled.button `\r\nmargin: 0 8px;\r\n`;\r\n\r\nconst BalanceToggleButton = styled(Button)`\r\nwidth 150px;\r\n`;\r\n\r\nconst Balance = styled.div`\r\ncolor white;\r\nmin-width 250px;\r\nfont-size 1.5em;\r\n`;\r\n\r\nvar formater = Intl.NumberFormat('en-us', {\r\n    style: 'currency',\r\n    currency: 'USD'\r\n});\r\n\r\nexport default function AccountBalance(props) {\r\n    \r\n    const buttonText = props.showBalance ? \"Hide Balance\" : \"Show Balance\";\r\n    let content = `\\u00A0`;\r\n    if (props.showBalance) {\r\n        content = <>{formater.format(props.amount)}</>\r\n    }\r\n    const buttonClass = (props.showBalance ? 'btn btn-warning' : 'btn btn-info');\r\n   \r\n    return (\r\n        <>\r\n            <Balance>{content}</Balance>\r\n            <Section>\r\n                <BalanceToggleButton \r\n                    onClick={props.handleBalanceVisibilityChange}\r\n                    className={buttonClass}>\r\n                    {buttonText}\r\n                </BalanceToggleButton> \r\n                <Button className= \"btn btn-success\"\r\n                        onClick={props.handleBrrrr}>\r\n                                Money Button\r\n                </Button>\r\n            </Section>\r\n        </>\r\n    )\r\n    \r\n}\r\n\r\n\r\n\r\n\r\n\r\nAccountBalance.propTypes = {\r\n     amount: PropTypes.number.isRequired\r\n    }","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport styled from 'styled-components';\r\n\r\nimport 'bootswatch/dist/flatly/bootstrap.min.css';\r\n\r\nimport '@fortawesome/fontawesome-free/js/all';\r\n\r\nconst Img = styled.img`\r\nheight: 6rem;\r\n    pointer-events: none;\r\n`;\r\n\r\nconst H1 = styled.h1`\r\ncolor:rgb(244, 248, 240);\r\n`;\r\n\r\nconst Header = styled.header`\r\nbackground-color: rgb(2, 1, 53);\r\n    min-height: 20vh;\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n    justify-content: flex-start;\r\n    font-size: calc(10px + 2vmin);\r\n    color: white;\r\n`;\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n\r\nexport default function ExchangeHeader(props) {\r\n    \r\n    return (\r\n        <Header>\r\n        <Img src={logo} alt=\"React Logo\" />\r\n        <H1>\r\n            The Greatest Coin Exchange of All Time\r\n        </H1>\r\n        </Header>\r\n    )\r\n    \r\n}\r\n\r\n","import React, {useState,useEffect} from 'react';\nimport styled from 'styled-components';\nimport CoinList from './components/CoinList/CoinList';\nimport AccountBalance from './components/AccountBalance/AccountBalance';\nimport Exchangeheader from './components/ExchangeHeader/ExchangeHeader';\nimport axios from 'axios';\n\nimport 'bootswatch/dist/flatly/bootstrap.min.css';\n\nimport '@fortawesome/fontawesome-free/js/all';\n\n\nconst Div = styled.div`\n    text-align: center;\n    background-color: rgb(4, 6, 85);\n`;\n\nconst COIN_COUNT =10;\nconst formatPrice = price => parseFloat(Number(price).toFixed(4));\n\nfunction App (props) {\n\n  const [balance, setBalance] = useState(10000);\n  const [showBalance, setShowBalance] = useState(false);\n  const [coinData, setCoinData] = useState([]);\n\n  const componentDidMount = async () => {\n  const response = await axios.get('https://api.coinpaprika.com/v1/coins');\n  const coinIds = response.data.slice(0, COIN_COUNT).map(coin => coin.id);\n  const tickerUrl = 'https://api.coinpaprika.com/v1/tickers/';\n  const promises = coinIds.map(id => axios.get(tickerUrl + id));\n  const coinData = await Promise.all(promises);\n  const coinPriceData = coinData.map(function(response) {\n    const coin = response.data;\n      return {\n        key: coin.id,\n        name: coin.name,\n        ticker: coin.symbol,\n        balance: 0,\n        price: formatPrice(coin.quotes.USD.price),\n      };    \n  });\n    //Retrieve the prices \n    setCoinData(coinPriceData);\n }\n\n useEffect(function() {\n   if(coinData.length === 0) {\n     componentDidMount();\n   }\n  });\n\n  const handleBrrrr = () => {\n    setBalance(oldBalance => oldBalance + 1200);\n  }\n  \n  const handleBalanceVisibilityChange = () =>{\n   setShowBalance(oldValue => !oldValue);\n  }\n\n  const handleTransaction = (isBuy, valueChangeId) =>{\n    var balanceChange = isBuy ? +1 : -1;\n    const newCoinData = coinData.map(function(values) {\n      let newValues = {...values};\n      if (valueChangeId == values.key) {\n        newValues.balance += balanceChange;\n        setBalance ( oldBalance => oldBalance - balanceChange * newValues.price);\n      }\n      return newValues;\n    });\n    setCoinData(newCoinData);\n  }\n\n  const handleRefresh = async (valueChangeId) => {\n    const tickerUrl = `https://api.coinpaprika.com/v1/tickers/${valueChangeId}`;\n    const response = await axios.get(tickerUrl);\n    const newPrice = formatPrice(response.data.quotes.USD.price);\n    const newCoinData = coinData.map( function(values) {\n      let newValues = {...values};\n      if( valueChangeId === values.key ){\n        newValues.price = newPrice;\n      }\n      return newValues;\n      \n    });\n\n    setCoinData(newCoinData);\n  }\n    \n    return (\n      <Div className=\"App\">\n         <Exchangeheader />\n         <AccountBalance \n            amount= {balance} \n            showBalance={showBalance} \n            handleBrrrr={handleBrrrr}\n            handleBalanceVisibilityChange={handleBalanceVisibilityChange}/>\n         <CoinList \n         coinData={coinData} \n         showBalance={showBalance}\n         handleTransaction={handleTransaction}\n         handleRefresh={handleRefresh}/>\n         \n        \n      </Div>\n    );\n \n  \n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}